template <class T> 
struct fenwick {

  vector <T> BIT;
  int Sz;

  fenwick (int n): Sz(1 << (int)ceil(log2(n + 1))) {
    BIT.resize(Sz);
  }

  T query (int i) {
    T sum = 0;
    i = min(i, Sz - 1);
    i = max(i, -1);
    for (++i; i; i -= i & -i) {
      sum += BIT[i];
    }
    return sum;
  }

  void update (int i, T x) {
    for (++i; i <= Sz; i += i & -i) {
      BIT[i] += x;
    }
  }

  void update (int i, int j, T x) {
    update(i, x);
    update(j + 1, -x);
  }

  T query (int st, int en) {
    return query(en) - query(st - 1);
  }

  int operator [] (int v) {
    int st = 0, Sz2 = Sz;
    while (Sz2 /= 2) {
      if (v >= BIT[st + Sz2]) {
        v -= BIT[st += Sz2];
      }
    }
    return st;
  }

  int size () {
    return query(Sz - 1);
  }
};
