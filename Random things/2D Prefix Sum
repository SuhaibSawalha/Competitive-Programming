struct PrefixSum2D {
  int n, m;
  vector<vector<int64_t>> p;

  PrefixSum2D(const vector<vector<int>>& a): n(a.size()), m(a[0].size()) {
    p.resize(n, vector<int64_t>(m));
    p[0][0] = a[0][0]; 
    for (int i = 1; i < m; i++) {
      p[0][i] = p[0][i - 1] + a[0][i]; 
    }
    for (int i = 1; i < n; i++) {
      p[i][0] = p[i - 1][0] + a[i][0];
    } 
    for (int i = 1; i < n; i++) { 
      for (int j = 1; j < m; j++) {
        p[i][j] = p[i - 1][j] + p[i][j - 1] - p[i - 1][j - 1] + a[i][j]; 
      }
    }
  }

  int64_t sum(int i, int j, int x, int y) {
    if (i < 0 || i > x || x >= n || j < 0 || j > y || y >= m) {
      return 0;
    }
    return p[x][y] - (i ? p[i - 1][y] : 0) - (j ? p[x][j - 1] : 0) + (i && j ? p[i - 1][j - 1] : 0);
  }
};
