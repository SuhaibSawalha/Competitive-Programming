#include <ext/pb_ds/assoc_container.hpp>
using namespace __gnu_pbds;

auto random_address = [] { char *p = new char; delete p; return uint64_t(p); };

struct safe_hash {
  static unsigned hash32(unsigned x) {
    x = (x ^ (x >> 16)) * 0x45d9f3b;
    x = (x ^ (x >> 16)) * 0x45d9f3b;
    return x ^ (x >> 16);
  }
 
  static uint64_t splitmix64(uint64_t x) {
    // http://xorshift.di.unimi.it/splitmix64.c
    x += 0x9e3779b97f4a7c15;
    x = (x ^ (x >> 30)) * 0xbf58476d1ce4e5b9;
    x = (x ^ (x >> 27)) * 0x94d049bb133111eb;
    return x ^ (x >> 31);
  }
 
  template<typename T>
  uint64_t operator()(T x) const {
    static const uint64_t FIXED_RANDOM = splitmix64(chrono::steady_clock::now().time_since_epoch().count() * (random_address() | 1));
    return sizeof(x) <= 4 ? hash32(x ^ unsigned(FIXED_RANDOM)) : splitmix64(x ^ FIXED_RANDOM);
  }
};
 
struct safe_array_hash {
  template<typename T_array>
  uint64_t operator()(const T_array &arr) const {
    static const uint64_t RANDOM_MULT = safe_hash::splitmix64(chrono::steady_clock::now().time_since_epoch().count() * (random_address() | 1)) | 1;
    static safe_hash hash_obj;
    uint64_t hash_key = 0;

    for (const auto &x : arr)
      hash_key = RANDOM_MULT * hash_key + x;

    return hash_obj(hash_key);
  }
};
template <class T> using hash_set = gp_hash_table<T, null_type, safe
