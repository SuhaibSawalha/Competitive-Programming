struct BinaryLifting {
  int n;
  const int exp = 20;
  vector<int> depth;
  vector<vector<int>> anc;

  BinaryLifting(vector<vector<int>>& adj): n(adj.size()) {
    depth.resize(n);
    anc.resize(n, vector<int>(exp, -1));
    dfs(adj);
    for (int i = 1; i < exp; ++i) {
      for (int u = 0; u < n; ++u) {
        if (~anc[u][i - 1]) {
          anc[u][i] = anc[anc[u][i - 1]][i - 1];
        }
      }
    }
  }

  void dfs(vector<vector<int>>& adj, int u = 0, int p = -1, int d = 0) {
    anc[u][0] = p;
    depth[u] = d++;
    for (int v : adj[u]) {
      if (v != p){
        dfs(adj, v, u, d);
      }
    }
  }

  int lca(int u, int v) {
    if (depth[u] < depth[v]) {
      swap(u, v);
    }
    int dif = depth[u] - depth[v];
    for (int i = 0; i < exp; ++i) {
      if (dif >> i & 1) {
        u = anc[u][i];
      }
    }       
    if (u == v) {
      return u;
    }
    for (int i = exp - 1; ~i; --i) {
      if (anc[u][i] != anc[v][i]) {
        u = anc[u][i], v = anc[v][i];
      }
    }
    return anc[u][0];
  }

  int distance(int u, int v) {
    return depth[u] + depth[v] - 2 * depth[lca(u,v)];
  }

  int jump(int u, int steps) {
    for (int i = 0; i < exp; ++i) {
      if (steps >> i & 1) {
        u = anc[u][i];
      }
    }
    return u;
  }

  // move m steps in the path between u and v
  int getNode(int u, int v, int m) {
    int l = lca(u, v);
    int d = distance(u, l);
    if (d >= m) {
      return jump(u, m);
    }
    d = distance(u, v);
    return jump(v, d - m);
  }
};
