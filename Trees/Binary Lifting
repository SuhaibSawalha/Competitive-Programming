struct BinaryLifting {
  int n;
  int exp = 20;
  vector <int> depth;
  vector <vector<int>> T;

  BinaryLifting (vector<vector<int>> &adj): n(adj.size()) {
    depth = vector<int>(n);
    T = vector<vector<int>>(n,vector<int>(exp));
    dfs(adj);
    for (int i = 1; i < exp; ++i) {
      for (int u = 0; u < n; ++u) {
        if (~T[u][i - 1]){
          T[u][i] = T[T[u][i - 1]][i - 1];
        }
      }
    }
  }

  void dfs (vector<vector<int>> &adj, int u = 0, int p = -1, int d = 0) {
    T[u][0] = p;
    depth[u] = d++;
    for (int v : adj[u]) {
      if (v ^ p){
        dfs(adj, v, u, d);
      }
    }
  }

  int LCA (int u, int v) {
    if (depth[u] < depth[v]) {
      swap(u, v);
    }
    int dif = depth[u] - depth[v];
    for (int i = 0; i < exp; ++i) {
      if (dif >> i & 1) {
        u = T[u][i];
      }
    }       
    if (u == v) return u;
    for (int i = exp - 1; ~i; --i) {
      if (T[u][i] ^ T[v][i]) {
        u = T[u][i] , v = T[v][i];
      }
    }
    return T[u][0];
  }

  int distance (int u, int v) {
    return depth[u] + depth[v] - 2 * depth[LCA(u,v)];
  }

  int jump (int u, int steps) {
    for (int i = 0 ; i < exp ; ++i) {
      if (steps >> i & 1) {
        u = T[u][i];
      }
    }
    return u;
  }
};
