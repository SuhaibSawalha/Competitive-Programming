struct LCA {

  int n;
  vector<int> depth, node2idx, idx2node, lg{-1};
  vector <vector<int>> sp;

  LCA (vector<vector<int>>& adj) {
    n = adj.size();
    depth.resize(n);
    node2idx.resize(n);
    function<void(int, int)> dfs = [&] (int u, int p) {
      node2idx[u] = idx2node.size();
      idx2node.push_back(u);
      for (int v : adj[u]) {
        if (v ^ p) {
          depth[v] = depth[u] + 1;
          dfs(v, u);
          idx2node.push_back(u);
        }
      }
    };
    dfs(0, -1);
    int n = idx2node.size();
    for (int i = 1; i <= n; ++i) {
      lg.push_back(lg.back() + !(i & (i - 1)));
    }
    sp.resize(lg[n] + 1, vector<int>(n));
    iota(sp[0].begin(), sp[0].end(), 0);
    for (int i = 1; i < lg[n] + 1; ++i) {
      for (int j = 0; j < n - (1 << i) + 1; ++j) {
        int a = sp[i - 1][j];
        int b = sp[i - 1][j + (1 << i - 1)];
        sp[i][j] = depth[idx2node[a]] < depth[idx2node[b]] ? a : b;
      }
    }
  }

  int query (int a, int b) {
    int k = lg[b - a + 1];
    a = sp[k][a];
    b = sp[k][b - (1 << k) + 1];
    return depth[idx2node[a]] < depth[idx2node[b]] ? a : b;
  }

  int lca (int u, int v) {
    u = node2idx[u];
    v = node2idx[v];
    if (u > v) {
      swap(u, v);
    }
    return idx2node[query(u, v)];
  }
};
