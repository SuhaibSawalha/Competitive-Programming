vector<bool> sieve(int N) {
  vector<bool> is_prime(N + 1, 1);
  is_prime[0] = is_prime[1] = false;
  for (int i = 4; i <= N; i += 2) {
    is_prime[i] = false;
  }
  for (int i = 3; i * i <= N; i += 2) {
    if (is_prime[i]) {
      for (int j = i * i; j <= N; j += i) {
        is_prime[j] = false;
      }
    }
  }
  return is_prime;
}

vector<bool> linear_sieve(int N) {
  vector<bool> is_prime(N + 1, 1);
  is_prime[0] = is_prime[1] = false;
  for (int i = 4; i <= N; i += 2) {
    is_prime[i] = false;
  }  
  vector<int> primes{2};
  for (int i = 3; i <= N; i += 2) {
    if (is_prime[i]) {
      primes.push_back(i);
    }
    for (int j = 1; j < (int)primes.size() && i * primes[j] <= N; ++j) {
      is_prime[i * primes[j]] = false;
      if (i % primes[j] == 0) {
        break;
      }
    }
  }
  return is_prime;
}
