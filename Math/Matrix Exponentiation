template <class T>
struct Matrix {
  int n;
  vector<vector<T>> a;
  Matrix(const vector<vector<int64_t>>& b): n(b.size()) {
    a.resize(n, vector<T>(n));
    for (int i = 0; i < n; ++i) {
      for (int j = 0; j < n; ++j) {
        a[i][j] = b[i][j];
      }
    }
  }

  T& operator()(int i, int j) {
    return a[i][j];
  }

  friend Matrix operator *(Matrix& a, Matrix& b) {
    int n = a.n;
    vector t(n, vector<int64_t>(n));
    Matrix c(t);
    for (int i = 0; i < n; ++i) {
      for (int j = 0; j < n; ++j) {
        for (int k = 0; k < n; ++k) {
          c(i, k) += a(i, j) * b(j, k);
        }
      }
    }
    return c;
  }

  vector<Matrix<T>> powers;
  void precomputePowers() {
    powers = {*this};
    for (int i = 1; i <= 62; ++i) {
      powers.push_back(powers.back() * powers.back());
    }
  }
  T answer(int a, int b, int k) {
    vector<T> dp(n);
    dp[a] = 1;
    for (int bit = 0; bit <= 62; ++bit) {
      if (k & (1LL << bit)) {
        vector<T> new_dp(n);
        for (int i = 0; i < n; ++i) {
          for (int j = 0; j < n; ++j) {
            new_dp[j] += dp[i] * powers[bit](i, j);
          }
        }
        swap(dp, new_dp);
      }
    }
    return dp[b];
  }
};
using mat = Matrix<Mint>;

mat exp(mat a, int64_t p) {
  int n = a.n;
  vector m(n, vector<int64_t>(n, 0));
  for (int i = 0; i < n; ++i) {
    m[i][i] = 1;
  }
  mat res(m);
  while (p) {
    if (p & 1) {
      res = res * a;
    }
    p /= 2;
    a = a * a;
  }
  return res;
}
