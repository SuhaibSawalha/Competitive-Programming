template <class T>
struct matrix {
  int n;
  vector<vector<T>> a;
  matrix (vector<vector<long long>> b): n(b.size()) {
    a.resize(n, vector<T>(n));
    for (int i = 0; i < n; ++i) {
      for (int j = 0; j < n; ++j) {
        a[i][j] = b[i][j];
      }
    }
  }

  T& operator() (int i, int j) {
    return a[i][j];
  }

  friend matrix operator* (matrix& a, matrix& b) {
    int n = a.n;
    vector<vector<long long>> t(a.n, vector<long long>(n));
    matrix c(t);
    for (int i = 0; i < n; ++i) {
      for (int j = 0; j < n; ++j) {
        for (int k = 0; k < n; ++k) {
          c(i, k) += a(i, j) * b(j, k);
        }
      }
    }
    return c;
  }
};
using mat = matrix<Mint>;

mat exp (mat a, long long p) {
  int n = a.n;
  vector<vector<long long>> m(n, vector<long long>(n, 0));
  for (int i = 0; i < n; ++i) {
    m[i][i] = 1;
  }
  mat res(m);
  while (p) {
    if (p & 1) {
      res = res * a;
    }
    p /= 2;
    a = a * a;
  }
  return res;
}
