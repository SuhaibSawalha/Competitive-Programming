long long phi (long long x) {
  long long ans = x;
  if (x % 2 == 0) {
    while (x % 2 == 0) {
      x /= 2;
    }
    ans -= ans / 2;
  }
  for (long long i = 3; i * i <= x; i += 2) {
    if (x % i == 0) {
      while (x % i == 0) {
        x /= i;
      }
      ans -= ans / i;
    }
  }
  if (x > 1) {
    ans -= ans / x;
  }
  return ans;
}

vector<int> ETF(int N) {
  vector<int> phi(N + 1);
  phi[0] = 0;
  phi[1] = 1;
  for (int i = 2; i <= N; ++i) {
    phi[i] = i - 1;
  }
  for (int i = 2; i <= N; ++i) {
    for (int j = 2 * i; j <= N; j += i) {
      phi[j] -= phi[i];
    }
  }
  return phi;
}

map<int64_t, Mint> dp;
Mint totient_sum(int64_t n) {
  if (n < (int)phi.size()) {
    return phi[n];
  }
  if (dp.count(n)) {
    return dp[n];
  }
  Mint ans = inv2 * n * (n + 1);
  int64_t l = 2;
  while (l <= n) {
    int64_t q = n / l;
    int64_t r = n / q;
    ans -= (r - l + 1) * totient_sum(q);
    l = r + 1;
  }
  return dp[n] = ans;
}
