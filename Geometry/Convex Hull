int orientation(point a, point b, point c) {
  double v = a.x * (b.y - c.y) + b.x * (c.y - a.y) + c.x * (a.y - b.y);
  if (v < 0) return -1; // clockwise
  if (v > 0) return +1; // counter-clockwise
  return 0;
}

bool collinear(point a, point b, point c) { 
  return orientation(a, b, c) == 0;
}

bool cw(point a, point b, point c, bool include_collinear) {
  int o = orientation(a, b, c);
  return o < 0 || (include_collinear && o == 0);
}

vector<point> convex_hull(vector<point>& a, bool include_collinear = false) {
  point p0 = *min_element(a.begin(), a.end(), [](point a, point b) {
    return tie(a.y, a.x) < tie(b.y, b.x);
  });
  sort(a.begin(), a.end(), [&p0](const point& a, const point& b) {
    int o = orientation(p0, a, b);
    if (o == 0) {
      return p0.distance(a) < p0.distance(b);
    }
    return o < 0;
  });
  if (include_collinear) {
    int i = (int)a.size() - 1;
    while (i >= 0 && collinear(p0, a[i], a.back())) {
      i--;
    }
    reverse(a.begin() + i + 1, a.end());
  }
  vector<point> st;
  for (int i = 0; i < (int)a.size(); i++) {
    while (st.size() > 1 && !cw(st[st.size() - 2], st.back(), a[i], include_collinear)) {
      st.pop_back();
    }
    st.push_back(a[i]);
  }
  if (include_collinear == false && st.size() == 2 && st[0] == st[1]) {
    st.pop_back();
  }
  return st;
}
