template <class T>
struct SQRT_Decomposition {
  vector<T> sq, v;
  function<T(T, T)> merge;
  int BLOCK;
  T init_val;

  SQRT_Decomposition(vector<T> &_v, function<T(T, T)> fun, T _init_val = 0) {
    v = _v;
    merge = fun;
    int n = v.size();
    BLOCK = sqrt(n);
    init_val = _init_val;
    sq.assign(n / BLOCK + 1, init_val);
    for (int i = 0; i < n; ++i) {
      sq[i / BLOCK] = merge(sq[i / BLOCK], v[i]);
    }
  }

  T query(int l, int r) {
    T ans = init_val;
    while (l <= r) {
      if (l % BLOCK == 0 && l + BLOCK < r) {
        ans = merge(ans, sq[l / BLOCK]);
        l += BLOCK;
      } else {
        ans = merge(ans, v[l]);
        l += 1;
      }
    }
    return ans;
  }
};
