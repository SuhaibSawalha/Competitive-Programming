template <class T> 
struct FenwickTree {
  vector<T> bit;
  int sz;

  FenwickTree(int n): sz(n + 1) {
    bit.assign(sz + 1, 0);
  }

  FenwickTree(const vector<T> &a): FenwickTree(a.size()) {
    for (int i = 0; i < (int)a.size(); ++i) {
      update(i, a[i]);
    }
  }

  void update(int i, T x) {
    for (++i; i <= sz; i += i & -i) {
      bit[i] += x;
    }
  }

  // This can only be used with single point query
  void update(int l, int r, T x) {
    update(l, x);
    update(r + 1, -x);
  }

  T query(int i) {
    T sum = 0;
    i = min(i, sz - 1);
    i = max(i, -1);
    for (++i; i > 0; i -= i & -i) {
      sum += bit[i];
    }
    return sum;
  }

  T query(int l, int r) {
    return query(r) - query(l - 1);
  }

  int operator [](int v) {
    int st = 0, sz2 = sz;
    while (sz2 /= 2) {
      if (v >= bit[st + sz2]) {
        v -= bit[st += sz2];
      }
    }
    return st;
  }

  int size() {
    return query(sz - 1);
  }
};
