template<typename T = int, int B = 31>
struct XorBasis {

  vector<T> basis;
  int64_t zeros;
  bool can_make_zero;

  XorBasis() {
    basis.assign(B, 0);
    zeros = 1;
    can_make_zero = 0;
  }

  XorBasis(vector<T> &a) {
    XorBasis();
    for (int i = 0; i < int(a.size()); ++i) {
      insert(a[i]);
    }
  }

  bool insert(T x) {
    for (int i = B - 1; ~i; --i) {
      if (x >> i & 1) {
        if (basis[i] == 0) {
          basis[i] = x;
          return true;
        }
        x ^= basis[i];
      }
    }
    zeros = 2 * min(zeros, int64_t(LLONG_MAX) / 2);
    can_make_zero |= x == 0;
    return false;
  }

  void insert(XorBasis xb) {
    for (int i = 0; i < B; ++i) {
      if (xb.basis[i]) {
        insert(xb.basis[i]);
      }
    }
    can_make_zero |= xb.can_make_zero;
  }

  T getMax() {
    T ans = 0;
    for (int i = B - 1; ~i; --i) {
      ans = max(ans, ans ^ basis[i]);
    }
    return ans;
  }

  bool can(T x) {
    for (int i = B - 1; ~i; --i) {
      x = min(x, x ^ basis[i]);
    }
    return x == 0;
  }

  int64_t times(T x) {
    return can(x) ? zeros : int64_t(0);
  }

  T differentXors() {
    T ans = 1;
    for (int i = 0; i < B; ++i) {
      if (basis[i] != 0) {
        ans *= 2;
      }
    }
    return ans;
  }

  vector<T> allXors() {
    vector<T> xors;
    vector<int> ib;
    for (int i = 0; i < B; ++i) {
      if (basis[i] != 0) {
        ib.push_back(basis[i]);
      }
    }
    int M = int(ib.size());
    for (int i = 0; i < 1 << M; ++i) {
      int x = 0;
      for (int j = 0; j < M; ++j) {
        if (i >> j & 1) {
          x ^= ib[j];
        }
      }
      xors.push_back(x);
    }
    sort(xors.begin(), xors.end());
    return xors;
  }
};
