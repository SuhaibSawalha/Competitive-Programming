struct MinimumSpanningTree {
  int n;
  vector<vector<array<int, 2>>> adj, mst;

  MinimumSpanningTree(const vector<vector<array<int, 2>>>& _adj): n(_adj.size()), adj(_adj) {}

  int64_t prim() {
    mst.assign(n, {});
    int64_t cost = 0;
    set<array<int, 2>> st;
    vector<bool> visited(n);
    vector<array<int, 2>> min_e(n, {INT_MAX, 0});
    st.insert({0, 0});
    min_e[0] = {0, 0};
    for (int i = 0; i < n; ++i) {
      if (st.empty()) {
        return -1;
      }
      int u = (*st.begin())[1];
      visited[u] = true;
      cost += (*st.begin())[0];
      st.erase(st.begin());
      if (u) {
        mst[u].push_back({min_e[u][1], min_e[u][0]});
        mst[min_e[u][1]].push_back({u, min_e[u][0]});
      }
      for (const auto& e : adj[u]) {
        if (!visited[e[0]] && e[1] < min_e[e[0]][0]) {
          st.erase({min_e[e[0]][0], e[0]});
          min_e[e[0]] = {e[1], u};
          st.insert({e[1], e[0]});
        }
      }
    }
    return cost;
  }

  int64_t kruskal() {
    mst.assign(n, {});
    vector<array<int, 3>> edges;
    for (int u = 0; u < n; ++u) {
      for (const auto& e : adj[u]) {
        edges.push_back({e[1], u, e[0]});
      }
    }
    sort(edges.begin(), edges.end());
    DSU dsu(n);
    int64_t cost = 0;
    for (const auto& e : edges) {
      if (dsu(e[1], e[2])) {
        cost += e[0];
        mst[e[1]].push_back({e[2], e[0]});
        mst[e[2]].push_back({e[1], e[0]});
      }
    }
    if (dsu.Ncmp != 1) {
      return -1;
    }
    return cost;
  }
};
