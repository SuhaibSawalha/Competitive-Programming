struct BipartiteMatching {
  vector<vector<int>> adj;
  vector<int> L, R, vis;
  int vid = 0;

  BipartiteMatching (int n, int m) : adj(n), L(n, -1), R(m, -1), vis(n) {}

  void AddEdge (int a, int b) {
    adj[a].emplace_back(b);
  }
 
  bool match(int u) {
    if (vis[u] == vid) {
      return false;
    }
    vis[u] = vid;
    for (int v : adj[u]) {
      if (R[v] == -1) {
        L[u] = v;
        R[v] = u;
        return true;
      }
    }
    for (int v : adj[u]) {
      if (match(R[v])) {
        L[u] = v;
        R[v] = u;
        return true;
      }
    }
    return false;
  }

  int solve() {
    int ok = 1, n = L.size();
    while (ok--) {
      ++vid;
      for (int i = 0; i < n; i++) {
        if (L[i] == -1) {
          ok |= match(i);
        }
      }
    }
    return n - count(L.begin(), L.end(), -1);
  }
};
