#include <bits/stdc++.h>
using namespace std;
    
int n, m;
vector<array<int, 4>> edges;
vector<vector<array<int, 2>>> adj;
vector<int> dsu, sz, depth;
vector<vector<int>> anc, bl;

int find (int u) {
	return dsu[u] == u ? u : dsu[u] = find(dsu[u]);
}

bool unite (int u, int v) {
	if ((u = find(u)) != (v = find(v))) {
		if (sz[u] < sz[v]) {
			swap(u, v);
		}
		dsu[v] = u;
		sz[u] += sz[v];
		return 1;
	}
	return 0;
}

void dfs (int u = 0, int p = -1) {
	anc[u][0] = p;
	for (auto &v : adj[u]) {
		if (v[0] ^ p) {
			bl[v[0]][0] = v[1];
			depth[v[0]] = depth[u] + 1;
			dfs(v[0], u); 
		}
	}
}

int lca (int u, int v) {
	if (depth[u] < depth[v]) {
		swap(u, v);
	}
	int dif = depth[u] - depth[v], ans = 0;
	for (int i = 0; i < 20; ++i) {
		if (dif >> i & 1) {
			ans = max(ans, bl[u][i]);
			u = anc[u][i];
		}
	}
	if (u == v) {
		return ans;
	}
	for (int i = 19; ~i; --i) {
		if (anc[u][i] ^ anc[v][i]) {
			ans = max({ans, bl[u][i], bl[v][i]});
			u = anc[u][i], v = anc[v][i];
		}
	}
	return max({ans, bl[u][0], bl[v][0]});;
}

int main (){

  #ifndef ONLINE_JUDGE
    freopen("SuhaibSawalha1","r",stdin);
  #endif

  ios_base::sync_with_stdio(false);
  cin.tie(NULL); cout.tie(NULL);

  cin >> n >> m;
  for (int i = 0; i < m; ++i) {
  	int u, v, w;
  	cin >> u >> v >> w, --u, --v;
  	edges.push_back({w, u, v, i});
  }
  sort(edges.begin(), edges.end());
  dsu.resize(n);
  iota(dsu.begin(), dsu.end(), 0);
  sz.resize(n, 1);
  depth.resize(n);
  adj.resize(n);
  long long MST = 0;
  for (auto &e : edges) {
  	if (unite(e[1], e[2])) {
  		MST += e[0];
  		adj[e[1]].push_back({e[2], e[0]});
  		adj[e[2]].push_back({e[1], e[0]});
  	}
  }
  vector<long long> ans(m);
  anc.resize(n, vector<int>(20));
  bl.resize(n, vector<int>(20));
  dfs();
	for (int i = 1; i < 20; ++i) {
	  for (int u = 0; u < n; ++u) {
  		if (~anc[u][i - 1]) {
  			anc[u][i] = anc[anc[u][i - 1]][i - 1];
	  		bl[u][i] = max(bl[u][i - 1], bl[anc[u][i - 1]][i - 1]);
	  	}
  	}
  }
  for (auto &e : edges) {
  	ans[e[3]] = MST + e[0] - lca(e[1], e[2]);
  }
  for (int i = 0; i < m; ++i) {
  	cout << ans[i] << "\n";
  }

  return 0;
}
