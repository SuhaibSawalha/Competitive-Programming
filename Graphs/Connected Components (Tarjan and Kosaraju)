struct ConnectedComponents {
  int n, SCC;
  vector<vector<int>> adj, dag, components;
  vector<int> cmp;

  ConnectedComponents(const vector<vector<int>>& _adj): n(_adj.size()), adj(_adj) {}

  void tarjan() {
    SCC = 0;
    components.clear();
    cmp.assign(n, -1);
    int dfst = 0, stcksz = 0;
    vector<int> lowlink(n), stck(n), visidx(n, -1);
    function<void(int)> dfs = [&](int u) {
      visidx[u] = lowlink[u] = dfst++;
      stck[stcksz++] = u;
      for (int v : adj[u]) {
        if (visidx[v] == -1) {
          dfs(v);
          lowlink[u] = min(lowlink[u], lowlink[v]);
        } else if (cmp[v] == -1) {
          lowlink[u] = min(lowlink[u], visidx[v]);
        }
      }
      if (lowlink[u] == visidx[u]) {
        components.push_back({});
        do {
          cmp[stck[--stcksz]] = SCC;
          components.back().push_back(stck[stcksz]);
        } while (stck[stcksz] != u);
        ++SCC;
      }
    };
    for (int i = 0; i < n; i++) {
      if (visidx[i] == -1) {
        dfs(i);
      }
    }
    dag.assign(SCC, {}); 
    for (int u = 0; u < n; ++u) {
      for (int v : adj[u]) {
        if (cmp[u] != cmp[v]) {
          dag[cmp[u]].push_back(cmp[v]);
        }
      }
    }
  }  

  void kosaraju() {
    SCC = 0;
    components.clear();
    cmp.assign(n, -1);
    vector<bool> visited(n);
    vector<int> order;
    function<void(int)> dfs = [&](int u) {
      visited[u] = true;
      for (int v : adj[u]) {
        if (!visited[v]) {
          dfs(v);
        }
      }
      order.push_back(u);
    };
    for (int i = 0; i < n; ++i) {
      if (!visited[i]) {
        dfs(i);
      }
    }
    reverse(order.begin(), order.end());
    vector<vector<int>> radj(n);
    for (int u = 0; u < n; ++u) {
      for (int v : adj[u]) {
        radj[v].push_back(u);
      }
    }
    visited.assign(n, false);
    vector<int> component;
    function<void(int)> rdfs = [&](int u) {
      visited[u] = true;
      for (int v : radj[u]) {
        if (!visited[v]) {
          rdfs(v);
        }
      }
      component.push_back(u);
    };
    for (int u : order) {
      if (!visited[u]) {
        component.clear();
        rdfs(u);
        components.push_back(component);
        for (int v : component) {
          cmp[v] = SCC;
        }
        ++SCC;
      }
    }
    dag.assign(SCC, {}); 
    for (int u = 0; u < n; ++u) {
      for (int v : adj[u]) {
        if (cmp[u] != cmp[v]) {
          dag[cmp[u]].push_back(cmp[v]);
        }
      }
    }
  }
};
