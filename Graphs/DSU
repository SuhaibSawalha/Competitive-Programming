struct DSU {

  vector <int> dsu;
  vector <int> siz;
  vector <list<int>> cmpE;
  int n;
  int Ncmp;

  DSU (int _n): n(_n), Ncmp(_n), dsu(_n), siz(_n), cmpE(_n){
    for (int i = 0; i < n; ++i){
      dsu[i] = i;
      siz[i] = 1;
      cmpE[i].push_back(i);
    }
  }

  int operator [] (int u){
    if (dsu[u] == u) return u;
    return dsu[u] = (*this)[dsu[u]];
  }

  int operator () (int u , int v){
    u = (*this)[u] , v = (*this)[v];
    if (u != v){
      if (siz[u] < siz[v]){
        swap(u,v);
      }
      dsu[v] = u;
      siz[u] += siz[v];
      siz[v] = 0;
      Ncmp--;
      cmpE[u].splice(cmpE[u].end(),cmpE[v]);
      return 0;
    }
    return 1;
  }
};
