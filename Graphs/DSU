struct DSU {
  vector <int> dsu, siz;
  vector <list<int>> cmpE;
  int n, Ncmp; 

  DSU (int _n): n(_n), Ncmp(_n), dsu(_n), siz(_n), cmpE(_n){
    for (int i = 0; i < n; ++i){
      dsu[i] = i;
      siz[i] = 1;
      cmpE[i].push_back(i);
    }
  }

  int operator [] (int u){
    return dsu[u] == u ? u : dsu[u] = (*this)[dsu[u]];
  }

  void operator () (int u , int v){
    u = (*this)[u] , v = (*this)[v];
    if (u != v){
      if (siz[u] < siz[v]){
        swap(u,v);
      }
      dsu[v] = u;
      siz[u] += siz[v];
      siz[v] = 0;
      Ncmp--;
      cmpE[u].splice(cmpE[u].end(),cmpE[v]);
    }
  }
};
