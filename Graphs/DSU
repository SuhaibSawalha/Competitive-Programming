struct DSU {
  int n, Ncmp;
  vector<int> dsu, siz;
  vector<list<int>> cmp;

  DSU(int _n): n(_n), Ncmp(_n), dsu(_n), siz(_n), cmp(_n) {
    for (int i = 0; i < n; ++i) {
      dsu[i] = i;
      siz[i] = 1;
      cmp[i].push_back(i);
    }
  }

  int operator [](int u) {
    return u == dsu[u] ? u : dsu[u] = (*this)[dsu[u]];
  }

  int operator ()(int u, int v) {
    u = (*this)[u], v = (*this)[v];
    if (u == v) {
      return 0;
    }
    if (siz[u] < siz[v]) {
      swap(u, v);
    }
    dsu[v] = u;
    siz[u] += siz[v];
    siz[v] = 0;
    Ncmp--;
    cmp[u].splice(cmp[u].end(), cmp[v]);
    return 1;
  }
};
