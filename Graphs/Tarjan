int cmpCnt, dfst ,stcksz;
vector<int> lowlink, visidx, stck, cmp;
vector<vector<int>> dag;

void tarjan (vector<vector<int>>& adj) {
  int n = adj.size();
  cmpCnt = dfst = stcksz = 0;
  lowlink.resize(n);
  stck.resize(n);
  cmp.assign(n, -1);
  visidx.assign(n, -1);
  dag.assign(n, {}); 
 
  function <void(int)> SCC = [&] (int u) {
    visidx[u] = lowlink[u] = dfst++;
    stck[stcksz++] = u;
    for (int v : adj[u]) {
      if (visidx[v] == -1) {
        SCC(v);
        lowlink[u] = min(lowlink[u], lowlink[v]);
      } 
      else if (cmp[v] == -1) {
        lowlink[u] = min(lowlink[u], visidx[v]);
      }
    }
    if (lowlink[u] == visidx[u]) {
      do {
        cmp[stck[--stcksz]] = cmpCnt;
      } while (stck[stcksz] != u);
      ++cmpCnt;
    }
  };
 
  for (int i = 0; i < n; i++) {
    if (visidx[i] == -1) {
      SCC(i);
    }
  }
  for (int u = 0; u < n; ++u) {
    for (int v : adj[u]) {
      if (cmp[u] != cmp[v]) {
        dag[cmp[u]].push_back(cmp[v]);
      }
    }
  }
}
